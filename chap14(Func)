14. 함수(Func)

  ex. 14-1. 이름 10번 쓰기

#include <iostream>
using namespace std;

void PrintName();
int main(){
	for (int i = 0; i < 10; i++) {
		cout << i + 1 << "번 : ";
		PrintName();
	}
	return 0;
}
void PrintName() {
	cout << "방은지" << endl;
}


  ex. 14-2. 이름 10번 쓰기  => 풀지 못 함(실행 안됨)
  
#include <iostream>
using namespace std;

char* PrintName();
int main() {
	for (int i = 0; i < 10; i++) {
		cout << i + 1 << "번 : ";
		cout << PrintName() << endl;
	}
	char b[] = "qkdd";
	char* p = b;
	cout << p << endl;
	cout << *p << endl;
	return 0;
}
char* PrintName() {
	char name[] = "dmswl";
	//char* p = name;
	return name;
}


  ex. 14-3. 중간값 구하기1

#include <iostream>
using namespace std;

int MidValue(int a, int b, int c, int d, int e);
int main() {
	int mid = MidValue(9, 1, 15, 3, 7);
	cout << "중간값: " << mid << endl;
	return 0;
}
int MidValue(int a, int b, int c, int d, int e) {
	int arr[] = { a, b, c, d, e };
	for (int i = 0; i < 4; i++) {                     //버블 정렬 사용(코드 작성이 쉽지만 효율은 낮음
		for (int j = 0; j < 4 - i; j++) {
			if (arr[j] > arr[j + 1]) {
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
	return arr[2];
}


  ex. 14-5. 중간값 구하기2

#include <iostream>
using namespace std;

int MidValue(const int arr[], int size);
int main() {
	int arr[10] = { 8, 10, 7, 2, 16, 9, 1, 0, 3, 5 };
	int mid1 = MidValue(arr, 10);
	int mid2 = MidValue(arr, 5);

	cout << "10개 중 중간값: " << mid1 << endl;
	cout << "5개 중 중간값: " << mid2 << endl;
	return 0;
}
int MidValue(const int arr[], int size) {
	int i, j;
	int s[20];
	int result;
	for (i = 0; i < size; i++) {
		s[i] = arr[i];
	}

	if (size % 2 == 0) {
		for (i = 0; i < size - 1; i++) {
			for (j = 0; j < size - 1 - i; j++) {
				if (s[j] > s[j + 1]) {
					int tmp = s[j];
					s[j] = s[j + 1];
					s[j + 1] = tmp;
				}
			}
		}
		result = s[size / 2] < s[size / 2 - 1] ? s[size / 2] : s[size / 2 - 1];
	}
	else {
		for (i = 0; i < size - 1; i++) {
			for (j = 0; j < size - 1 - i; j++) {
				if (s[j] > s[j + 1]) {
					int tmp = s[j];
					s[j] = s[j + 1];
					s[j + 1] = tmp;
				}
			}
		}
		result = s[(size / 2)];
	}
	return result;
}
